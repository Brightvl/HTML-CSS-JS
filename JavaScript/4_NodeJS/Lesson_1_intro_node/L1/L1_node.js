// require(). Эта функция возвращает объект, который содержит функции и объекты модуля HTTP
// require — это функция, которая возвращает нужную встроенную библиотеку
// по названию, переданному в первом аргументе
const http = require('http');

// Функция принимает в качестве аргумента функцию
// обратного вызова (callback), которая будет вызываться при каждом
// HTTP-запросе к серверу. Эта функция обратного вызова получает два
// параметра: req и res. Параметр req представляет объект HTTP-запроса, а
// параметр res представляет объект HTTP-ответа
const server = http.createServer((req, res) => {
    console.log('Запрос получен');

    // res.writeHead() позволяет установить заголовки ответа — метаданные,
    // которые передаются вместе с данными ответа и содержат информацию об их
    // типе, размере, кодировке и других характеристиках. Метод res.writeHead()
    // принимает два аргумента:
    // ○ Код состояния (status code) — число, которое указывает на результат
    // обработки запроса сервером. Например, код 200 означает успешный
    // ответ, а код 404 — что запрашиваемый ресурс не найден.
    // ○ Объект заголовков (headers) — объект, который содержит пары
    // ключ-значение, где ключ — это имя заголовка, а значение — это
    // значение заголовка. Например, {‘Content-Type’: ‘text/html’} означает,
    // что тип данных ответа — это HTML-текст.
    if (req.url === '/home' || req.url === '/') {
        res.writeHead(200, {'Content-Type': 'text/html; charset=UTF-8'});
        res.end('<h1>Добро пожаловать на главную страницу!</h1>');
    }
    // Метод res.end() позволяет завершить отправку ответа. Этот метод принимает
        // один необязательный аргумент: данные (data).
        // ○ Данные — это строка или буфер, содержащие данные ответа, которые
    // мы хотим отправить клиенту.
    else if (req.url === '/about') {
        res.writeHead(200, {'Content-Type': 'text/html; charset=UTF-8'});
        res.end('<h1>Добро пожаловать на страницу обо мне!</h1>');
    } else {
        res.writeHead(404, {'Content-Type': 'text/html; charset=UTF-8'});
        res.end('<h1>404 Страница не найдена!</h1>');
    }

});

const port = 3000;
// метод принимает два аргумента: порт и функцию
// обратного вызова, которая будет вызываться при успешном запуске сервера.
server.listen(port, () => console.log(`server is running on port ${port}`));

//http://localhost:3000/