// Задание 1
// 1. Создайте функцию delayedMessage(message, delay),
// которая принимает аргументы message (строка) и delay
// (число). Функция должна выводить заданное сообщение в
// консоль через указанную задержку.

delayedMessage = (message, delay) => setTimeout(() => console.log(message), delay);

// 2. Вызовите функцию delayedMessage() три раза с разными
// сообщениями и задержками. Например:
delayedMessage("Сообщение 1", 2000)
delayedMessage("Сообщение 2", 1000)
delayedMessage("Сообщение 3", 3000)

// 3. После вызова всех функций delayedMessage(), добавьте
// сообщение вида "Конец программы" с помощью
// console.log().
console.log('Конец программы') //todo как вывести после всех?
// Ожидаемый результат
// Сообщение 2
// Сообщение 1
// Сообщение 3
// Конец программы


// Задание 2
// Напишите программу, которая загружает данные с сервера с
// использованием объекта XMLHttpRequest и отображает полученную информацию в консоли.
// 1. Создайте функцию loadData(url), которая принимает аргумент url(строка) -
// адрес сервера для загрузки данных.

loadData = (url) => {
    // 2. Внутри функции loadData() создайте объект XMLHttpRequest с
    // помощью new XMLHttpRequest().
    const xhr = new XMLHttpRequest();

    // 3. Зарегистрируйте обработчик события onreadystatechange, который
    // будет вызываться при изменении состояния запроса.
    // Проверьте, если readyState равен 4 (успешно выполнен запрос) и status равен
    // 200 (успешный статус ответа сервера), то выведите полученные
    // данные в консоль с помощью console.log(xhr.responseText).
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
            console.log(xhr.responseText);
        }
    };
    // 4. Откройте запрос с помощью xhr.open("GET", url, true), где "GET" - тип
    // запроса, url - адрес сервера, true - асинхронный режим запроса.
    xhr.open("GET", url, true);
    // 5. Отправьте запрос на сервер с помощью xhr.send().
    xhr.send();
};

// Задание 3
// У вас есть список задач, которые необходимо выполнить в определенном порядке.
// Каждая задача должна быть выполнена через определенный промежуток времени, заданный в миллисекундах.
// Вам необходимо написать функцию, которая принимает список задач и интервал времени, а затем выполняет
// каждую задачу через определенный промежуток времени.
//
const tasks = [
    {name: 'task 1', time: 1000},
    {name: 'task 2', time: 2000},
    {name: 'task 3', time: 3000},
    {name: 'task 4', time: 4000},
    {name: 'task 5', time: 5000}
];

function executeTasks(tasks) {
    tasks.forEach(task => setTimeout(() => console.log(task.name), task.time));
}

executeTasks(tasks);

// Задание 4
// Напишите программу, которая загружает данные с сервера с использованием функции fetch.
// Ваша задача — использовать предложенный шаблон запроса для получения данных и их обработки.
//
// Создайте функцию, которая отправляет запрос к серверу, используя fetch.
// Адрес сервера для запроса: https://api.randomdatatools.ru/?count=5.
// В функции реализуйте обработку промиса, возвращаемого fetch.
// Используйте метод .then() для обработки ответа сервера.
// Проверьте свойство response.ok.
// Добавьте обработку ошибок с помощью метода .catch().
// Выведите сообщение об ошибке в консоль, если в процессе выполнения запроса или обработки
// данных возникли проблемы.
fetch('https://api.randomdatatools.ru/?count=5')// делаем запрос к серверу, мол есть что то
    .then((response) => {
        return response.json(); // если есть возвращает json
    })
    .then((data) => {
        data.forEach((el) => console.log(el.FirstName)); // и выведи в консоль имена
    }).catch(error => {
    console.error("There has been a problem with your fetch operation:", error); // Если ошибка, то выводим в консоль
});

// Разработайте простой веб-интерфейс для отображения списка пользователей, получаемого с сервера.
// Вам необходимо отобразить имена пользователей и их email-адреса.
// Используйте функцию fetch для отправки GET-запроса к https://jsonplaceholder.typicode.com/users.
// Этот запрос вернет JSON-массив объектов пользователей.
// В обработчике .then() преобразуйте полученный ответ в JSON.
// После успешного получения и преобразования ответа в JSON, отобразите на странице список пользователей.
// Для каждого пользователя покажите его имя и email.
// Для отображения можно использовать любой HTML-элемент, например, ul для списка и li для элементов списка.
// Добавьте базовую обработку ошибок, чтобы в случае неудачного запроса на странице
// отображалось сообщение об ошибке.

let ulEl = document.createElement('ul');
document.body.appendChild(ulEl);
fetch('https://jsonplaceholfder.typicode.com/users')
    .then((response) => {
        return response.json();
    })
    .then(data => {
        data.forEach(user => {
            const userItem = document.createElement('li');
            userItem.textContent = `${user.name} (${user.email})`;
            ulEl.appendChild(userItem);
        });
    });